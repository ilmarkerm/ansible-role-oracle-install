- debug: var=oracle_home
  when: oracle_install_lock_granted

# Check that TNS files exist

- debug:
    msg: "{{ oracle_db_versions[oracle_db_version]['sqlnet_ora'] | default(oracle_meta_sqlnet_ora) }}"
  when: oracle_link_tns

- name: Check that sqlnet.ora exists
  stat:
    path: "{{ oracle_db_versions[oracle_db_version]['sqlnet_ora'] | default(oracle_meta_sqlnet_ora) }}"
  register: oracle_install_stat_sqlnet
  failed_when: not oracle_install_stat_sqlnet.stat.exists
  when: oracle_link_tns

- name: Check that tnsnames.ora exists
  stat:
    path: "{{ oracle_db_versions[oracle_db_version]['tnsnames_ora'] | default(oracle_meta_tnsnames_ora) }}"
  register: oracle_install_stat_tns
  failed_when: not oracle_install_stat_tns.stat.exists
  when: oracle_link_tns

#####################
# Install ORACLE_HOME
#####################

- set_fact:
    oracleinstallrsp: /tmp/oracle_install_{{ oracle_db_version }}.rsp

- name: Prepare installation template
  template:
    src: "{{ oracle_db_versions[oracle_db_version]['template'] }}"
    dest: "{{ oracleinstallrsp }}"
    owner: "{{ oracle_db_owner }}"
    group: "{{ oracle_db_group }}"
    mode: "0660"
  when: oracle_install_lock_granted

# For software that needs to be installed (<18)
- name: Install database home (up to 12.2)
  shell: "{{ oracle_installer_base }}/{{ oracle_db_versions[oracle_db_version]['installer'] }}/runInstaller -silent -responseFile {{ oracleinstallrsp }} -waitforcompletion -ignorePrereq -ignoreSysPrereqs"
  args:
    creates: "{{ oracle_home }}/bin/oracle"
  when: oracle_install_lock_granted  and oracle_db_versions[oracle_db_version]['version'] < '18'
  register: oracle_installer_runinstaller
  failed_when: oracle_installer_runinstaller.rc > 0 and "Successfully Setup Software" not in oracle_installer_runinstaller.stdout
- name: Show runinstaller output
  debug:
    var: oracle_installer_runinstaller.stdout_lines
  when: oracle_installer_runinstaller is changed

# For golden image distribution (>=18)
- block:
    - name: Create destination ORACLE_HOME directory (from 18)
      file:
        path: "{{ oracle_home }}"
        state: directory
        mode: "0755"
        owner: "{{ oracle_db_owner }}"
        group: "{{ oracle_db_group }}"
    - name: Copy database home (from 18)
      shell: "rsync -av {{ oracle_installer_base }}/{{ oracle_db_versions[oracle_db_version]['installer'] }}/ {{ oracle_home }}/"
      args:
        creates: "{{ oracle_home }}/bin/oracle"
      register: oracle_installer_rsync
    - name: Install database home (from 18)
      shell: "{{ oracle_home }}/runInstaller -silent -responseFile {{ oracleinstallrsp }} -waitforcompletion -ignorePrereq"
      register: oracle_installer_runinstaller18
      when: oracle_installer_rsync is changed
      failed_when: oracle_installer_runinstaller18.rc > 0 and "Successfully Setup Software" not in oracle_installer_runinstaller18.stdout
    - name: Show runinstaller output
      debug:
        var: oracle_installer_runinstaller18.stdout_lines
      when: oracle_installer_runinstaller18 is changed
  when: oracle_install_lock_granted and oracle_db_versions[oracle_db_version]['version'] >= '18'
  
# Common
- set_fact:
    oracle_db_was_installed: no
- set_fact:
    oracle_db_was_installed: yes
  when: oracle_installer_runinstaller is changed or oracle_installer_runinstaller18 is changed
- block:
    - name: Enable DNFS
      shell: "cd $ORACLE_HOME/rdbms/lib && make -f ins_rdbms.mk dnfs_on"
      environment:
        ORACLE_HOME: "{{ oracle_home }}"
      when: oracle_dnfs
    - name: Run orainstRoot.sh
      shell: "{{ oracle_inventory_location }}/orainstRoot.sh"
      args:
        creates: /etc/oraInst.loc
      become: yes
      become_user: root
    - name: Run root.sh
      shell: "{{ oracle_home }}/root.sh"
      become: yes
      become_user: root
  when: oracle_db_was_installed

- block:
    - name: Link sqlnet.ora
      file:
        path: "{{ oracle_home }}/network/admin/sqlnet.ora"
        src: "{{ oracle_db_versions[oracle_db_version]['sqlnet_ora'] | default(oracle_meta_sqlnet_ora) }}"
        state: link
    - name: Link tnsnames.ora
      file:
        path: "{{ oracle_home }}/network/admin/tnsnames.ora"
        src: "{{ oracle_db_versions[oracle_db_version]['tnsnames_ora'] | default(oracle_meta_tnsnames_ora) }}"
        state: link
  when: oracle_link_tns and oracle_db_was_installed
  
######################
# Patching ORACLE_HOME
######################

# OPatch

- block:
    - name: Remove old OPatch
      file:
        path: "{{ oracle_home }}/OPatch"
        state: absent
    - name: Unzip new OPatch
      unarchive:
        remote_src: yes
        src: "{{ oracle_patch_base }}/{{ oracle_db_versions[oracle_db_version]['opatch'] }}"
        dest: "{{ oracle_home }}"
        owner: "{{ oracle_db_owner }}"
        group: "{{ oracle_db_group }}"
  when: oracle_db_was_installed and oracle_db_versions[oracle_db_version]['opatch'] is defined

# opatchauto

- name: Run opatchauto for RAC
  shell: "{{ oracle_home }}/OPatch/opatchauto apply {{ oracle_patch_base }}/{{ oracle_install_patchname }} -oh {{ oracle_home }}"
  become: yes
  become_user: root
  when: oracle_rac and oracle_db_versions[oracle_db_version]['autopatch'] is defined and oracle_db_was_installed
  with_items: "{{ oracle_db_versions[oracle_db_version]['autopatch'] }}"
  loop_control:
    loop_var: oracle_install_patchname

- block:
    - name: Get list of all subpatches
      shell: find {{ oracle_patch_base }}/{{ oracle_install_patchname }} -maxdepth 1 -mindepth 1 -type d ! -name automation
      register: oracle_install_subpatches
      when: oracle_db_versions[oracle_db_version]['autopatch'] is defined
      with_items: "{{ oracle_db_versions[oracle_db_version]['autopatch'] }}"
      changed_when: no
      loop_control:
        loop_var: oracle_install_patchname
    - name: Run opatchauto for single instance
      shell: "$ORACLE_HOME/OPatch/opatch apply -silent"
      args:
        chdir: "{{ oracle_install_patchname }}"
      ignore_errors: yes
      when: oracle_db_versions[oracle_db_version]['autopatch'] is defined and oracle_install_subpatches
      with_items: "{{ oracle_install_subpatches.results|map(attribute='stdout_lines')|list }}"
      loop_control:
        loop_var: oracle_install_patchname
  when: not oracle_rac and oracle_db_was_installed
  environment:
    ORACLE_HOME: "{{ oracle_home }}"

# One-Off patches

- block:
    - name: Install one-off patches
      shell: "{{ oracle_home }}/OPatch/opatch apply -silent"
      args:
        chdir: "{{ oracle_patch_base }}/{{ oracle_install_patchname }}"
      when: oracle_db_versions[oracle_db_version]['oneoff'] is defined 
      with_items: "{{ oracle_db_versions[oracle_db_version]['oneoff'] }}"
      loop_control:
        loop_var: oracle_install_patchname
    - name: Rerun root.sh
      shell: "$ORACLE_HOME/root.sh -silent"
      become: yes
      become_user: root
      when: not oracle_rac
  when: oracle_db_was_installed
  environment:
    ORACLE_HOME: "{{ oracle_home }}"

# Helping scripts

- name: glogin.sql (db)
  lineinfile: dest="{{ oracle_home }}/sqlplus/admin/glogin.sql" line='set sqlprompt "_user @ _connect_identifier:>"' backup=yes
  when: oracle_db_was_installed

- name: Add profiles
  template:
    src: dotprofile.j2
    dest: "{{ oracle_meta_db_owner_home }}/.profile_{{ oracle_db_version }}"
    owner: "{{ oracle_db_owner }}"
    mode: "0600"
    backup: yes

- name: Add .bashrc
  template:
    src: bashrc.j2
    dest: "{{ oracle_meta_db_owner_home }}/.bashrc"
    owner: "{{ oracle_db_owner }}"
    group: "{{ oracle_db_group }}"
    mode: "0600"
